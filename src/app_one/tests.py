from django.test import TestCase

# Create your tests here.

# import requests

# r = requests.post('http://httpbin.org/post', files={'report.xls': open('report.xls', 'rb')})

data = {'image': ['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']}

import io

from django.core.files.uploadedfile import InMemoryUploadedFile

# Create a file-like object to write thumb data (thumb data previously created
# using PIL, and stored in variable 'thumb')
thumb_io = io.StringIO()
thumb.save(thumb_io, format='JPEG')

# Create a new Django file-like object to be used in models as ImageField using
# InMemoryUploadedFile.  If you look at the source in Django, a
# SimpleUploadedFile is essentially instantiated similarly to what is shown here
thumb_file = InMemoryUploadedFile(thumb_io, None, 'foo.jpg', 'image/jpeg',
                                  thumb_io.len, None)
